{"name":"Mynewcaffeversionlearning","tagline":"Learning New Caffe","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and we’ll help you sort it out.\r\n\r\n### Installation\r\n#### 1. Cuda 6.5 toolkits\r\n1. Download cuda-6.5 from NVIDIA\r\n2. Uninstall the current driver and install new driver and cuda-6.5 toolkits\r\n```\r\n1. sudo service lightdm stop (stop display)\r\n2. CRTL + ALT + F1 (Change to command line)\r\n3. sudo sh cuda-6.5-run\r\n```\r\n3. Setup Environment\r\n   ```\r\n   export PATH=/usr/local/cuda-6.5/bin:$PATH\r\n   \r\n   export LD_LIBRARY_PATH=/usr/local/cuda-6.5/lib64:$LD_LIBRARY_PATH\r\n   ```\r\n   \r\n4. GPU Test\r\n   * Go to \r\n   ```\r\n   \r\n   ```\r\n5. \r\nnew Version learning\r\n<blockquote cite=\"http://developer.mozilla.org\">\r\n  <p>This is a quotation taken from the Mozilla Developer Center.</p>\r\n</blockquote>\r\n\r\n\r\n### 2. Matlab Wapper\r\n#### 1. install Matlab under Linux\r\n* download address: <http://xxxx.need.to.add.com>\r\n* Install Process\r\n<blockquote>\r\n  <p>\r\n    1. run \"setup.exe\" (or \"bin\\win32\\setup.exe\" to install 32-bit Matlab under 64-bit Windows)\r\n    \r\n    2. choose ***\"install manually without using the internet\"***\t\t\r\n    \r\n    3. set the \"file installation key\" to be ***25716-63335-16746-06072***\r\n    \r\n    4. setup Matlab with required components\r\n    \r\n    5. when asked to activate the product select ***“Activate manually without internet”***\r\n    \r\n    6. select \"X:\\serial\\license.lic\" when asked for license file (where \"X\" is drive letter amounted under /mnt/* of my Linux)\r\n  </p>\r\n</blockquote>\r\n\r\n### 3. Python Wapper\r\n##### Install dependency packages\r\n>\r\n    Cython>=0.19.2\r\n    \r\n    numpy>=1.7.1\r\n    \r\n    scipy>=0.13.2\r\n    \r\n    scikit-image>=0.9.3\r\n    \r\n    scikit-learn>=0.14.1\r\n    \r\n    ***matplotlib>=1.3.1***\r\n    \r\n    ipython>=1.1.0\r\n    \r\n    h5py>=2.2.0\r\n    \r\n    leveldb>=0.191\r\n    \r\n    networkx>=1.8.1\r\n    \r\n    nose>=1.3.0\r\n    \r\n    pandas>=0.12.0\r\n    \r\n    python-dateutil>=1.4,<2\r\n    \r\n    protobuf>=2.5.0\r\n    \r\n    python-gflags>=2.0\r\n>\r\n\r\n\r\n```\r\n    $ sudo pip install -r /path/to/caffe-master/python/requirements.txt \r\n```\r\n\r\n* When errors occur, note the information on the screen to install the necessary packages\r\n<blockquote>\r\n[...]\r\nDownloading/unpacking matplotlib>=1.3.1 (from -r python/requirements.txt (line 6))\r\n  Downloading matplotlib-1.4.2.tar.gz (50.1Mb): 50.1Mb downloaded\r\n  Running setup.py egg_info for package matplotlib\r\n    The required version of distribute (>=0.6.28) is not available,\r\n    and can't be installed while this script is running. Please\r\n    install a more recent version first, using\r\n    'easy_install -U distribute'.\r\n    \r\n    (Currently using distribute 0.6.24dev-r0 (/usr/lib/python2.7/dist-packages))\r\n    Complete output from command python setup.py egg_info:\r\n    The required version of distribute (>=0.6.28) is not available,\r\n\r\nand can't be installed while this script is running. Please\r\n\r\n***install a more recent version first***, using\r\n\r\n***'easy_install -U distribute'***.\r\n\r\n[...]\r\n\r\n</blockquote>\r\n\r\n1. run following scripts under caffe-master(caffe_root directory)\r\n```\r\n    make all \r\n    make pycaffe\r\n    make distribute\r\n    export PYTHONPATH=/home/zhuzhu/share_zhu/caffe-master/python\r\n    \r\n```\r\n2. Check ***import caffe***\r\n```\r\n    open ipython notebook\r\n    cd **/caffe-master/python (go to the directory of caffe/python)\r\n    import caffe\r\n```\r\nerror fixed\r\n  * Install scikit-image\r\n```\r\n\r\n$ sudo pip install scikit-image  \r\n    ImportError: You need `six` version 1.3 or later.\r\n$ sudo pip install six  \r\n$ sudo pip install -U scikit-image  \r\n\r\n```\r\n\r\n2. \r\nhttp://blog.csdn.net/u011333059/article/details/38078617\r\n\r\n#### install cmake 2.8.9\r\n\r\nNote that in ***Ubuntu 12.04***, Aptitude will install version ***CMake 2.8.7 by default***, which is ***not supported by Caffe’s CMake build*** (requires at least 2.8.8). As a workaround\r\nif you are using Ubuntu 12.04 you can try the ***following steps to install CMake 2.8.9***:\r\n\r\n```\r\n    sudo add-apt-repository ppa:ubuntu-sdk-team/ppa -y\r\n    \r\n    sudo apt-get -y update\r\n    \r\n    sudo apt-get install cmake\r\n```\r\n#### Install ***glog***, ***gflags*** and ***lmdb after*** CMake 2.8.9 installed\r\n1.Download and Install glog before gflags\r\n```\r\n    wget https://google-glog.googlecode.com/files/glog-0.3.3.tar.gz\r\n    \r\n    tar zxvf glog-0.3.3.tar.gz\r\n    \r\n    cd glog-0.3.3\r\n    \r\n    ./configure\r\n    \r\n    make && make install\r\n    \r\n```\r\n2. Download and Install gflags\r\n```\r\n    wget https://github.com/schuhschuh/gflags/archive/master.zip\r\n    \r\n    unzip master.zip\r\n    \r\n    cd gflags-master\r\n    \r\n    mkdir build && cd build\r\n    \r\n    export CXXFLAGS=\"-fPIC\" && cmake .. && make VERBOSE=1\r\n    \r\n    make && make install\r\n```\r\n3. Download and Install lmdb\r\n```\r\n    git clone git://gitorious.org/mdb/mdb.git\r\n    \r\n    cd mdb/libraries/liblmdb\r\n    \r\n    make && make install\r\n```    \r\n\r\n### Get trained Models\r\n* run python script\r\n    * dependency\r\n    * pip search yaml\r\n    *   sudo pip install yaml\r\n\r\n\r\n## Case Study\r\n### ***1. Fine-tuning CaffeNet for Style Recognition on “Flickr Style” Data***\r\n* Go to [Finetune Flickr_stype Tutorial Page](http://caffe.berkeleyvision.org/gathered/examples/finetune_flickr_style.html) to see:\r\n   * How to define new model to ***reuse the trained weights***\r\n   * How to adapt learning parameters to speed up learning process\r\n* ***My Command***\r\n\r\n***Note: running all following commands under caffe_root directory***\r\n\r\n1.Download data\r\n```\r\n    caffe-master$ python examples/finetune_flickr_style/assemble_data.py --workers=-1 --images=2000 --seed 831486\r\n    \r\n```\r\nWhen it's done, following messages will show on the screen\r\n\r\n```\r\n    Downloading 2000 images with 7 workers...\r\n    Writing train/val for 1921(1931 in reference page) successfully downloaded images.\r\n    \r\n```\r\n2.Get trained bvlc net\r\n```\r\n    caffe-master$ ./scripts/download_model_binary.py models/bvlc_reference_caffenet.\r\n    \r\n```\r\nWhen it's done, the follow messages will be showed on the screen\r\n\r\n3.Train fine-tune net with pre-trained net\r\n\r\n```\r\n    caffe-master$ ./build/tools/caffe train -solver models/finetune_flickr_style/solver.prototxt -weights models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel -gpu 0\r\n    \r\n```\r\nWhen it runs, a lot of information will on the screen\r\n```\r\n    [...]\r\n    \r\n    I0828 22:10:04.025378  9718 solver.cpp:46] Solver scaffolding done.\r\n    I0828 22:10:04.025388  9718 caffe.cpp:95] Use GPU with device ID 0\r\n    I0828 22:10:04.192004  9718 caffe.cpp:107] Finetuning from models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\r\n    \r\n    [...]\r\n    \r\n    I0828 22:18:19.700461 11510 solver.cpp:397] Iteration 20, lr = 0.001\r\n    I0828 22:18:24.924685 11510 solver.cpp:195] Iteration 40, loss = 2.18531\r\n    I0828 22:18:24.924741 11510 solver.cpp:397] Iteration 40, lr = 0.001\r\n    I0828 22:18:30.114858 11510 solver.cpp:195] Iteration 60, loss = 2.4915\r\n    I0828 22:18:30.114910 11510 solver.cpp:397] Iteration 60, lr = 0.001\r\n    I0828 22:18:35.328071 11510 solver.cpp:195] Iteration 80, loss = 2.04539\r\n    I0828 22:18:35.328127 11510 solver.cpp:397] Iteration 80, lr = 0.001\r\n    I0828 22:18:40.588317 11510 solver.cpp:195] Iteration 100, loss = 2.1924\r\n    I0828 22:18:40.588373 11510 solver.cpp:397] Iteration 100, lr = 0.001\r\n    I0828 22:18:46.171576 11510 solver.cpp:195] Iteration 120, loss = 2.25107\r\n    I0828 22:18:46.171669 11510 solver.cpp:397] Iteration 120, lr = 0.001\r\n    \r\n    [...]\r\n    \r\n```\r\nIf we are eager to check all the information ,just run the command instead of previous one\r\n```\r\n    caffe-master$ ./build/tools/caffe train -solver models/finetune_flickr_style/solver.prototxt -weights models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel -gpu 0 >&./trainFinetuneNetLog.txt\r\n    \r\n```\r\n### Tutorials For Caffe\r\nReference to [Tutorials](http://caffe.berkeleyvision.org/tutorial/) \r\n\r\n\r\n### Examples From Caffe Website\r\n\r\n#### \r\n### Reference\r\n[1].(http://blog.csdn.net/lingerlanlan/article/details/24379689)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}